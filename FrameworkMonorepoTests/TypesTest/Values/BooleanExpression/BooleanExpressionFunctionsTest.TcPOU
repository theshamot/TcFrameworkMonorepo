<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="BooleanExpressionFunctionsTest" Id="{80524f69-f9b6-07f1-1cf6-7e60802adb4b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK BooleanExpressionFunctionsTest EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[And234();
Or234();
Xor234();]]></ST>
    </Implementation>
    <Method Name="And234" Id="{cc811e54-7937-0681-2fea-b190333add33}">
      <Declaration><![CDATA[METHOD And234 : BOOL
VAR
	bool1 : BOOL;
	bool2 : BOOL;
	bool3 : BOOL;
	bool4 : BOOL;
	value2 : BoolValue;
	value3 : BoolValue;
	value4 : BoolValue;
	disposable : Disposable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Functions And2, 3, 4');

value2 := And2(Bind(bool1), Bind(bool2));
value3 := And3(Bind(bool1), Bind(bool2), Bind(bool3));
value4 := And4(Bind(bool1), Bind(bool2), Bind(bool3), Bind(bool4));

bool1 := FALSE;
bool2 := FALSE;
bool3 := FALSE;
bool4 := FALSE;

AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value2.Value,
	Message := 'FALSE AND FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value3.Value,
	Message := 'FALSE AND FALSE AND FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value4.Value,
	Message := 'FALSE AND FALSE AND FALSE AND FALSE should be FALSE');

bool1 := TRUE;
bool2 := FALSE;
bool3 := FALSE;
bool4 := FALSE;

AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value2.Value,
	Message := 'TRUE AND FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value3.Value,
	Message := 'TRUE AND FALSE AND FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value4.Value,
	Message := 'TRUE AND FALSE AND FALSE AND FALSE should be FALSE');

bool1 := TRUE;
bool2 := TRUE;
bool3 := TRUE;
bool4 := TRUE;

AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value2.Value,
	Message := 'TRUE AND TRUE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value3.Value,
	Message := 'TRUE AND TRUE AND TRUE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value4.Value,
	Message := 'TRUE AND TRUE AND TRUE AND TRUE should be TRUE');

__QUERYINTERFACE(value2, disposable);
disposable.Dispose();
__QUERYINTERFACE(value3, disposable);
disposable.Dispose();
__QUERYINTERFACE(value4, disposable);
disposable.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Or234" Id="{770f2fac-607c-0eb2-295f-df8650818392}">
      <Declaration><![CDATA[METHOD Or234 : BOOL
VAR
	bool1 : BOOL;
	bool2 : BOOL;
	bool3 : BOOL;
	bool4 : BOOL;
	value2 : BoolValue;
	value3 : BoolValue;
	value4 : BoolValue;
	disposable : Disposable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Functions Or2, 3, 4');

value2 := Or2(Bind(bool1), Bind(bool2));
value3 := Or3(Bind(bool1), Bind(bool2), Bind(bool3));
value4 := Or4(Bind(bool1), Bind(bool2), Bind(bool3), Bind(bool4));

bool1 := FALSE;
bool2 := FALSE;
bool3 := FALSE;
bool4 := FALSE;

AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value2.Value,
	Message := 'FALSE OR FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value3.Value,
	Message := 'FALSE OR FALSE OR FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value4.Value,
	Message := 'FALSE OR FALSE OR FALSE OR FALSE should be FALSE');

bool1 := TRUE;
bool2 := FALSE;
bool3 := FALSE;
bool4 := FALSE;

AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value2.Value,
	Message := 'TRUE OR FALSE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value3.Value,
	Message := 'TRUE OR FALSE OR FALSE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value4.Value,
	Message := 'TRUE OR FALSE OR FALSE OR FALSE should be TRUE');

bool1 := TRUE;
bool2 := TRUE;
bool3 := TRUE;
bool4 := TRUE;

AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value2.Value,
	Message := 'TRUE OR TRUE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value3.Value,
	Message := 'TRUE OR TRUE OR TRUE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value4.Value,
	Message := 'TRUE OR TRUE OR TRUE OR TRUE should be TRUE');

__QUERYINTERFACE(value2, disposable);
disposable.Dispose();
__QUERYINTERFACE(value3, disposable);
disposable.Dispose();
__QUERYINTERFACE(value4, disposable);
disposable.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Xor234" Id="{1067bfb6-3a6c-0ecb-085d-c481b7ca9525}">
      <Declaration><![CDATA[METHOD Xor234 : BOOL
VAR
	bool1 : BOOL;
	bool2 : BOOL;
	bool3 : BOOL;
	bool4 : BOOL;
	value2 : BoolValue;
	value3 : BoolValue;
	value4 : BoolValue;
	disposable : Disposable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Functions Xor2, 3, 4');

value2 := Xor2(Bind(bool1), Bind(bool2));
value3 := Xor3(Bind(bool1), Bind(bool2), Bind(bool3));
value4 := Xor4(Bind(bool1), Bind(bool2), Bind(bool3), Bind(bool4));

bool1 := FALSE;
bool2 := FALSE;
bool3 := FALSE;
bool4 := FALSE;

AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value2.Value,
	Message := 'FALSE XOR FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value3.Value,
	Message := 'FALSE XOR FALSE XOR FALSE should be FALSE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value4.Value,
	Message := 'FALSE XOR FALSE XOR FALSE XOR FALSE should be FALSE');

bool1 := TRUE;
bool2 := FALSE;
bool3 := FALSE;
bool4 := FALSE;

AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value2.Value,
	Message := 'TRUE XOR FALSE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value3.Value,
	Message := 'TRUE XOR FALSE XOR FALSE should be TRUE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value4.Value,
	Message := 'TRUE XOR FALSE XOR FALSE XOR FALSE should be TRUE');

bool1 := TRUE;
bool2 := TRUE;
bool3 := TRUE;
bool4 := TRUE;

AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value2.Value,
	Message := 'TRUE XOR TRUE should be FALSE');
AssertEquals_BOOL(
	Expected := TRUE,
	Actual := value3.Value,
	Message := 'TRUE XOR TRUE XOR TRUE should be TRUE');
AssertEquals_BOOL(
	Expected := FALSE,
	Actual := value4.Value,
	Message := 'TRUE XOR TRUE XOR TRUE XOR TRUE should be FALSE');

__QUERYINTERFACE(value2, disposable);
disposable.Dispose();
__QUERYINTERFACE(value3, disposable);
disposable.Dispose();
__QUERYINTERFACE(value4, disposable);
disposable.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>