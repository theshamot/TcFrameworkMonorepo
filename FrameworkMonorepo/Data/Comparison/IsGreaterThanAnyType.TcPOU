<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="IsGreaterThanAnyType" Id="{bc215b7b-077d-00ac-3bc2-da49398e4869}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION IsGreaterThanAnyType : BOOL
VAR_INPUT
	a					: __SYSTEM.AnyType; // A and B have to be same type
	b					: __SYSTEM.AnyType; // A and B have to be same type
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF a.TypeClass <> b.TypeClass THEN
	RETURN;
END_IF

CASE UDINT_TO_INT(a.TypeClass) OF
    IBaseLibrary.TypeClass.TYPE_BOOL :
        IsGreaterThanAnyType := PBOOL_TO_BOOL(a.pValue) > PBOOL_TO_BOOL(b.pValue);
    IBaseLibrary.TypeClass.TYPE_BIT :
        IsGreaterThanAnyType := BYTE_TO_BIT(a.pValue^) > BYTE_TO_BIT(b.pValue^);
    IBaseLibrary.TypeClass.TYPE_BYTE :
        IsGreaterThanAnyType := a.pValue^ > b.pValue^;
    IBaseLibrary.TypeClass.TYPE_WORD :
        IsGreaterThanAnyType := PWORD_TO_WORD(a.pValue) > PWORD_TO_WORD(b.pValue);
    IBaseLibrary.TypeClass.TYPE_DWORD :
        IsGreaterThanAnyType := PDWORD_TO_DWORD(a.pValue) > PDWORD_TO_DWORD(b.pValue);
    IBaseLibrary.TypeClass.TYPE_LWORD :
        IsGreaterThanAnyType := PLWORD_TO_LWORD(a.pValue) > PLWORD_TO_LWORD(b.pValue);
    IBaseLibrary.TypeClass.TYPE_SINT :
        IsGreaterThanAnyType := PSINT_TO_SINT(a.pValue) > PSINT_TO_SINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_INT :
        IsGreaterThanAnyType := PINT_TO_INT(a.pValue) > PINT_TO_INT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_DINT :
        IsGreaterThanAnyType := PDINT_TO_DINT(a.pValue) > PDINT_TO_DINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_LINT :
        IsGreaterThanAnyType := PLINT_TO_LINT(a.pValue) > PLINT_TO_LINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_USINT :
        IsGreaterThanAnyType := PUSINT_TO_USINT(a.pValue) > PUSINT_TO_USINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_UINT :
        IsGreaterThanAnyType := PUINT_TO_UINT(a.pValue) > PUINT_TO_UINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_UDINT :
        IsGreaterThanAnyType := PUDINT_TO_UDINT(a.pValue) > PUDINT_TO_UDINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_ULINT :
        IsGreaterThanAnyType := PULINT_TO_ULINT(a.pValue) > PULINT_TO_ULINT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_REAL :
        IsGreaterThanAnyType := PREAL_TO_REAL(a.pValue) > PREAL_TO_REAL(b.pValue);
    IBaseLibrary.TypeClass.TYPE_LREAL :
        IsGreaterThanAnyType := PLREAL_TO_LREAL(a.pValue) > PLREAL_TO_LREAL(b.pValue);
    IBaseLibrary.TypeClass.TYPE_STRING :
        IsGreaterThanAnyType := PSTRING_TO_STRING(a.pValue) > PSTRING_TO_STRING(b.pValue);
    IBaseLibrary.TypeClass.TYPE_TIME :
        IsGreaterThanAnyType := PTIME_TO_TIME(a.pValue) > PTIME_TO_TIME(b.pValue);
    IBaseLibrary.TypeClass.TYPE_DATE :
        IsGreaterThanAnyType := PDATE_TO_DATE(a.pValue) > PDATE_TO_DATE(b.pValue);
    IBaseLibrary.TypeClass.TYPE_DATEANDTIME :
        IsGreaterThanAnyType := PDT_TO_DT(a.pValue) > PDT_TO_DT(b.pValue);
    IBaseLibrary.TypeClass.TYPE_TIMEOFDAY :
        IsGreaterThanAnyType := PTOD_TO_TOD(a.pValue) > PTOD_TO_TOD(b.pValue);
    IBaseLibrary.TypeClass.TYPE_POINTER :
        IsGreaterThanAnyType := a.pValue > b.pValue;
    IBaseLibrary.TypeClass.TYPE_LTIME :
        IsGreaterThanAnyType := PLTIME_TO_LTIME(a.pValue) > PLTIME_TO_LTIME(b.pValue);
	ELSE
		RETURN;
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>