<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="RecipeManager" Id="{77c5c610-1c81-0616-06a3-6337e886bd1e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RecipeManager IMPLEMENTS Cyclic, Name
VAR
	values : ARRAY[0..RecipeParameters.ValueCountLimit - 1] OF RecipeValue;
	valueCount : INT;

	valueStringBuffer : STRING(RecipeParameters.TableBufferSize);
	_Buffer : STRING(RecipeParameters.BufferSize);
	sb : StringBuilderExtBuffer := (Buffer := ToAnyType(_Buffer));

	_FolderPath : T_MaxString;
	_FileName : T_MaxString;
	file : File;
	savingFile : BOOL;
	loadingFile : BOOL;
	directory : Directory;
	
	_JustLoaded : BOOL;
	_JustSaved : BOOL;

	_NewLine : STRING := '$N';
	_Assignment : STRING := ':=';
	_Extension : STRING := '.txt';
	_StringBoundary : STRING := '$'';
	
	_Name : T_MaxString;
	
	savedMessage : MessageEventLogger(TC_EVENTS.RecipeManagerEventClass.RecipeManagerSavedRecipe) := (Source := THIS^);
	loadedMessage : MessageEventLogger(TC_EVENTS.RecipeManagerEventClass.RecipeManagerLoadedRecipe) := (Source := THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddSingleValue" Id="{9c02c9fb-7c7b-0661-015f-e417480cf676}">
      <Declaration><![CDATA[METHOD AddSingleValue
VAR_INPUT
	value : ANY;
	name : T_MaxString;
END_VAR
VAR
	newValue : POINTER TO RecipeSingleValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (valueCount < RecipeParameters.ValueCountLimit) THEN
	newValue := __NEW(RecipeSingleValue);
	newValue^.Bind(value);
	newValue^.Name := name;
	newValue^.Assignment := _Assignment;
	values[valueCount] := newValue^;
	
	valueCount := valueCount + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddStringValue" Id="{189baf3e-2ee6-0ea2-308a-17fa4409fecf}">
      <Declaration><![CDATA[METHOD AddStringValue
VAR_INPUT
	value : ANY;
	name : T_MaxString;
END_VAR
VAR
	newValue : POINTER TO RecipeStringValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (valueCount < RecipeParameters.ValueCountLimit) THEN
	newValue := __NEW(RecipeStringValue);
	newValue^.Bind(value);
	newValue^.Buffer := ToAnyType(valueStringBuffer);
	newValue^.Name := name;
	newValue^.Assignment := _Assignment;
	values[valueCount] := newValue^;
	
	valueCount := valueCount + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddTableValue" Id="{a0ec7a96-2cd5-06a8-338d-e79a080e8ef1}">
      <Declaration><![CDATA[METHOD AddTableValue : REFERENCE TO RecipeTableValue
VAR_INPUT
	firstRow : ANY;
	name : T_MaxString;
END_VAR
VAR
	newValue : POINTER TO RecipeTableValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (valueCount < RecipeParameters.ValueCountLimit) THEN
	newValue := __NEW(RecipeTableValue);
	newValue^.Buffer := ToAnyType(valueStringBuffer);
	newValue^.DefineRow(firstRow);
	newValue^.Name := name;
	newValue^.Assignment := _Assignment;
	values[valueCount] := newValue^;
	
	valueCount := valueCount + 1;
	
	AddTableValue REF= newValue^;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Assignment" Id="{7b617ac0-6621-0620-25e6-167c8d314db3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Assignment : STRING]]></Declaration>
      <Get Name="Get" Id="{ff7c6d30-30ed-05c0-15ed-a55cdafd19f5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Assignment := _Assignment;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b83d7434-de63-0421-248b-53035cc15ef9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Assignment := Assignment;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="BuildParseBuffer" Id="{7764e3fa-19ce-0603-390f-e7376cb3160f}">
      <Declaration><![CDATA[PROPERTY BuildParseBuffer : REFERENCE TO StringBuilderExtBuffer]]></Declaration>
      <Get Name="Get" Id="{04b38d0d-2de1-0215-0560-02a87dcdea3e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BuildParseBuffer REF= sb;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="BuildValueString" Id="{f214b55b-5050-0596-38a7-7e0d32dc8021}">
      <Declaration><![CDATA[METHOD BuildValueString : BOOL
VAR
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sb.Clear();
FOR i := 0 TO valueCount - 1 DO
	IF (i > 0) THEN
		sb.Append(_NewLine);
	END_IF
	sb.AppendByPointer(values[i].BuildAndGetAssignmentString());
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{7cfa17eb-d3a3-07fa-3d85-776882933b67}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{99ff0090-9192-030e-0556-a7e5db2b7f61}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := savingFile OR loadingFile;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cyclic" Id="{788b2b89-a987-0ac7-0a9d-51b6f200985e}">
      <Declaration><![CDATA[METHOD Cyclic
]]></Declaration>
      <Implementation>
        <ST><![CDATA[file.Cyclic();
directory.Cyclic();

_JustSaved := FALSE;
_JustLoaded := FALSE;

IF (savingFile AND file.Done) THEN
	savingFile := FALSE;
	_JustSaved := TRUE;
	sb.Clear();
	ListRecipes();
	savedMessage.ClearArguments().AddStringByValue(_FileName);
	savedMessage.Send();
END_IF

IF (loadingFile AND file.Done) THEN
	loadingFile := FALSE;
	_JustLoaded := TRUE;
	ParseValueString();
	sb.Clear();
	loadedMessage.ClearArguments().AddStringByValue(_FileName);
	loadedMessage.Send();
END_IF

IF (NOT directory.ListDone) THEN
	ListRecipes();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Extension" Id="{b2ad55aa-52f2-0956-066e-a1a2576c9f56}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Extension : STRING]]></Declaration>
      <Get Name="Get" Id="{0e62e0c4-473c-0784-1ea5-a8f46398960e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Extension := _Extension;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bdd58266-6978-0f1a-2ec7-37de221f0f67}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Extension := Extension;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_exit" Id="{eb111b38-3aef-0830-0bd7-caa81c03b2e3}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO valueCount - 1 DO
	values[i].Dispose();
	values[i] := 0;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8a42ac39-82f5-014b-0bba-01df588c4943}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="FileName" Id="{122af664-9e40-0299-141f-ec89317ca077}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FileName : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{d0dc6add-cd61-07c8-0a12-c52e0a4af129}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[FileName := _FileName;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6c1b1c2f-310a-01ed-009a-4841fd625cfb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_FileName := FileName;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="FolderPath" Id="{86b647fc-bf27-0419-0d76-a2f28385d87e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FolderPath : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{7e41cdcc-67a2-035c-364c-87055d04effd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[FolderPath := _FolderPath;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4581bd7b-a2f8-0080-3203-1c1a2fa0e72e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_FolderPath := FolderPath;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="GetRecipePath" Id="{aa927626-c3f3-0065-0867-fe8915b16b40}">
      <Declaration><![CDATA[METHOD PRIVATE GetRecipePath : T_MaxString
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetRecipePath := CONCAT(_FolderPath, _FileName);

IF (NOT StringEndsWithAny(_FileName, _Extension)) THEN
	GetRecipePath := CONCAT(GetRecipePath, _Extension);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTable" Id="{ebd01b12-3e62-008e-1e08-da5f95dc4ad3}">
      <Declaration><![CDATA[METHOD GetTable : REFERENCE TO RecipeTableValue
VAR_INPUT
	name : T_MaxString;
END_VAR
VAR
	value : RecipeValue;
	p : POINTER TO RecipeTableValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[value := GetValue(name);
__QUERYPOINTER(value, p);
IF (p <> 0) THEN
	GetTable REF= p^;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetValue" Id="{bb49e33a-de77-0d8c-1bfc-e271c4ee3ff5}">
      <Declaration><![CDATA[METHOD GetValue : RecipeValue
VAR_INPUT
	name : T_MaxString;
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO valueCount - 1 DO
	IF (values[i].Name = name) THEN
		GetValue := values[i];
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="JustLoaded" Id="{2077e4de-4c40-0aeb-0b63-275e0632eaf0}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY JustLoaded : BOOL]]></Declaration>
      <Get Name="Get" Id="{dbfa9129-0a70-0d56-33d3-bb4fc63f0d3d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JustLoaded := _JustLoaded;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="JustSaved" Id="{35c04087-3a17-0a9a-36f5-3fc152d5e4f8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY JustSaved : BOOL]]></Declaration>
      <Get Name="Get" Id="{75ffa0b7-f455-05fe-1195-95f3478693dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JustSaved := _JustSaved;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ListLoaded" Id="{56b2a616-06f4-01b1-10be-4d33872b8012}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ListLoaded : BOOL]]></Declaration>
      <Get Name="Get" Id="{0718b734-43a3-0db1-36cd-88083ba12ec5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ListLoaded := directory.ListDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ListRecipes" Id="{06b24d78-54a3-0fd9-025f-f678dfd8873d}">
      <Declaration><![CDATA[METHOD ListRecipes
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[directory.List(
	BuildStringInline(_FolderPath)
		.Append('*')
		.Append(_Extension)
		.GetString()
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Load" Id="{e13ba227-265c-003c-16a9-027fd14cba33}">
      <Declaration><![CDATA[METHOD Load
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_FileName = '' OR _FolderPath = '') THEN
	RETURN;
END_IF

sb.Clear();

file.Read(
	buffer := ADR(_Buffer),
	bufferLength := SIZEOF(_Buffer) - 1,
	filePath := GetRecipePath()
);

loadingFile := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{01bb3166-5490-0205-2121-3fe3bb87d958}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Name : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{0dacc52b-4c63-03e6-08ca-dc2fabd0f5cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := _Name;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c104e843-fcb5-02c5-00b8-f062a5fd3fb3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Name := Name;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="NewLine" Id="{5e9e4f96-dcb0-0eff-0f4b-96624bfd49c8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NewLine : STRING]]></Declaration>
      <Get Name="Get" Id="{a0908233-b4ff-0b65-14b9-2990cbb2630f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NewLine := _NewLine;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8e433a38-c0cb-0c47-2e09-30d231261540}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_NewLine := NewLine;

//serializer.NewLine := _NewLine;
//deserializer.NewLine := _NewLine;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ParseValueString" Id="{f8989f6e-d562-0c64-0845-3edcee6fa0d9}">
      <Declaration><![CDATA[METHOD PRIVATE ParseValueString
VAR
	caret : DINT;
	assignmentLength : DINT;
	newLineLength : DINT;
	variableNameLength : DINT;
	variableName : T_MaxString;
	tableRowCountString : STRING;
	tableRowCount : INT;
	singleValueString : T_MaxString;
	valueLength : DINT;
	tableLineLength : DINT;
	newLineIndex : DINT;
	stringBoundaryLength : DINT;
	
	value : RecipeValue;
	singleValue : RecipeSingleValueType;
	stringValue : RecipeStringValueType;
	tableValue : RecipeTableValueType;
	
	sbValueBuffer : StringBuilderExtBuffer := (Buffer := ToAnyType(valueStringBuffer));

	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sb.UpdateBufferLength();

assignmentLength := LEN(_Assignment);
newLineLength := LEN(_NewLine);
stringBoundaryLength := LEN(_StringBoundary);
WHILE caret < sb.Length DO
	// Search for assignment string
	variableNameLength := TO_DINT(FIND2(ADR(_Buffer[caret]), ADR(_Assignment))) - 1;
	IF (variableNameLength <= 0 OR variableNameLength > SIZEOF(T_MaxString) - 1) THEN
		EXIT;
	END_IF
	
	// Get variable name
	ClearData(variableName);
	SubString(_Buffer, variableName, caret, variableNameLength);
	variableName := F_LTrim(F_RTrim(variableName));
	tableRowCountString := F_LTrim(F_RTrim(GetStringBetween(variableName, '[', ']')));
	IF (LEN(tableRowCountString) > 0) THEN
		tableRowCount := STRING_TO_INT(tableRowCountString);
		variableName := LEFT(variableName, LEN(variableName) - LEN(tableRowCountString) - 2);
	ELSE
		tableRowCount := 0;
	END_IF
	
	caret := caret + variableNameLength + assignmentLength;
	
	// Find value by name
	value := GetValue(variableName);
	IF (value = 0) THEN
		CONTINUE;
	END_IF
	
	// Get value string
	// Parse and assign value
	// Update caret
	ClearData(singleValueString);
	IF (__QUERYINTERFACE(value, singleValue)) THEN
		valueLength := TO_DINT(FIND2(pSrcString := ADR(_Buffer[caret]), pFindString := ADR(_NewLine))) - 1;
		IF (valueLength < 0) THEN
			valueLength := sb.Length - caret;
		ELSIF (valueLength > SIZEOF(T_MaxString) - 1) THEN
			EXIT;
		END_IF
		SubString(_Buffer, singleValueString, caret, valueLength);
		singleValueString := F_LTrim(F_RTrim(singleValueString));
		singleValue.ParseAndAssignValue(singleValueString);
		caret := caret + valueLength + newLineLength;
	ELSIF (__QUERYINTERFACE(value, stringValue)) THEN
		caret := caret + TO_DINT(FIND2(
								pSrcString := ADR(_Buffer[caret]),
								pFindString := ADR(_StringBoundary)
						)) - 1 + stringBoundaryLength;
		valueLength := 0;
		WHILE TRUE DO
			valueLength := valueLength + TO_DINT(FIND2(
											pSrcString := ADR(_Buffer[caret + valueLength]),
											pFindString := ADR(_StringBoundary))
										) - 1;
			IF (valueLength = -1) THEN
				EXIT;
			ELSIF (caret + valueLength + 2 * stringBoundaryLength < sb.Length) THEN
				IF (StringBeginsWith(PSTRING_TO_STRING(ADR(_Buffer) + TO_DWORD(caret + valueLength + stringBoundaryLength)), _StringBoundary)) THEN
					valueLength := valueLength + 2 * stringBoundaryLength;
				ELSE 
					EXIT;
				END_IF 
			ELSE
				EXIT;
			END_IF
		END_WHILE
		sbValueBuffer.Clear().AppendSubString(_Buffer, caret, valueLength);
		stringValue.ParseAndAssignValue();
		newLineIndex := TO_DINT(FIND2(
									pSrcString := ADR(_Buffer[caret + valueLength + stringBoundaryLength]),
									pFindString := ADR(_NewLine)
							)) - 1;
		caret := caret + valueLength + stringBoundaryLength + newLineIndex + newLineLength;
	ELSIF (__QUERYINTERFACE(value, tableValue)) THEN
		FOR i := 0 TO 1 DO
			caret := caret + TO_DINT(FIND2(
									pSrcString := ADR(_Buffer[caret]),
									pFindString := ADR(_NewLine)
							)) - 1 + newLineLength;
		END_FOR
		valueLength := 0;
		FOR i := 0 TO tableRowCount - 1 DO
			tableLineLength := TO_DINT(FIND2(
									pSrcString := ADR(_Buffer[caret + valueLength]),
									pFindString := ADR(_NewLine)
							)) - 1 + newLineLength;
			IF (tableLineLength = 0) THEN
				tableLineLength := sb.Length - (caret + valueLength);
			END_IF
			valueLength := valueLength + tableLineLength;
		END_FOR
		sbValueBuffer.Clear().AppendSubString(_Buffer, caret, valueLength);
		tableValue.ParseAndAssignValues(tableRowCount);
		caret := caret + valueLength; // Newline is already included in table row search
	END_IF
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecipeExists" Id="{362dcd42-3486-0c62-11af-643746cf951e}">
      <Declaration><![CDATA[METHOD RecipeExists : BOOL
VAR_INPUT
	name : T_MaxString;
END_VAR
VAR
	fileName : T_MaxString;
	i : INT;
	list : REFERENCE TO ARRAY[0..49] OF T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (name = '') THEN
	RETURN;
END_IF

IF (StringEndsWithAny(name, _Extension)) THEN
	fileName := name;
ELSE
	fileName := CONCAT(name, _Extension);
END_IF

list REF= RecipeList;
FOR i := 0 TO 49 DO
	IF (list[i] = '') THEN
		RETURN;
	END_IF
	IF (list[i] = fileName) THEN
		RecipeExists := TRUE;
		RETURN;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Property Name="RecipeList" Id="{53671a00-5ebb-040a-0250-856488ee25e9}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY RecipeList : REFERENCE TO ARRAY[0..49] OF T_MaxString]]></Declaration>
      <Get Name="Get" Id="{cc34b112-61db-075c-07c4-6224ca7c3cef}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RecipeList REF= directory.FileNameList;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Save" Id="{f0759a7e-99b2-0933-354d-07d2436af8d4}">
      <Declaration><![CDATA[METHOD Save
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_FileName = '' OR _FolderPath = '') THEN
	RETURN;
END_IF

BuildValueString();

file.Write(
	buffer := ADR(_Buffer),
	bufferLength := LEN2(ADR(_Buffer)),
	filePath := GetRecipePath(),
	append := FALSE
);

savingFile := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>