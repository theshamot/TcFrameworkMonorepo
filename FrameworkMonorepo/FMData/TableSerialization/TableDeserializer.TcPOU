<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="TableDeserializer" Id="{ac25e541-c19a-0342-2f23-5f00fecd60cf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TableDeserializer
VAR
	_DataString : POINTER TO STRING;
	dataLength : DINT;
	rowDefinition : __SYSTEM.AnyType;
	_RowCount : DINT;
	_ColumnDefinitionBuffer : ARRAY[0..MaxColumnCount - 1] OF __SYSTEM.AnyType;
	_ColumnNameBuffer : ARRAY[0..MaxColumnCount - 1] OF T_MaxString;
	columnNamesOutput : __SYSTEM.AnyType;
	definedColumns : INT;

	_Separator : STRING := ',';
	_NewLine : STRING := '$N'; // Default is Windows newline.
	_DecimalSeparator : STRING := '.';
END_VAR
VAR CONSTANT
	MaxColumnCount : INT := TableSerializationParameters.DeserializerMaxColumns;
	DefaultDecimalSeparator : STRING := '.';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="DataString" Id="{3487dc60-cc91-4a43-8a0d-0551ca27c8b6}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY DataString : POINTER TO STRING]]></Declaration>
      <Get Name="Get" Id="{8cc0e152-d7a2-4043-a052-b993cd54d7db}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataString := _DataString;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bd17b9aa-3d4c-41a0-b30b-2c68dc3bad68}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_DataString := DataString;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="DecimalSeparator" Id="{d3dad73a-0f1a-41a0-a71e-05862e1d10d8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY DecimalSeparator : STRING]]></Declaration>
      <Get Name="Get" Id="{43213d27-d09c-0e10-0860-afcf924a6719}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DecimalSeparator := _DecimalSeparator;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{10f316a8-26b4-0f7b-0428-7a47d65a91e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_DecimalSeparator := DecimalSeparator;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DefineColumnNamesOutput" Id="{de401d8b-b754-0646-0d01-b230f4361c5f}">
      <Declaration><![CDATA[METHOD DefineColumnNamesOutput : REFERENCE TO TableDeserializer
VAR_INPUT
	columnNames : ANY; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[columnNamesOutput := columnNames;

DefineColumnNamesOutput REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DefineNextColumn" Id="{7a1778bf-3544-0497-095c-7861e545f68b}">
      <Declaration><![CDATA[METHOD DefineNextColumn : REFERENCE TO TableDeserializer
VAR_INPUT
	columnInFirstRow : ANY; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (definedColumns < MaxColumnCount) THEN
	_ColumnDefinitionBuffer[definedColumns] := columnInFirstRow;
	definedColumns := definedColumns + 1;
END_IF

DefineNextColumn REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DefineRow" Id="{f358bb43-9e62-0f97-1aa1-51c1ec6b43cf}">
      <Declaration><![CDATA[METHOD DefineRow : REFERENCE TO TableDeserializer
VAR_INPUT
	firstRow : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rowDefinition := firstRow;

DefineRow REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Deserialize" Id="{469a7f4d-b005-006e-04b0-81df065e5112}">
      <Declaration><![CDATA[METHOD Deserialize : DINT
VAR_INPUT
	includingHeader : BOOL;
END_VAR
VAR
	caret : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[dataLength := TO_DINT(LEN2(dataString));
IF (includingHeader) THEN
	caret := ReadHeader();
END_IF
caret := ReadAllRows(caret);

Deserialize := caret;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NewLine" Id="{e231f9e3-68dc-40f1-baa5-667ee97338a5}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NewLine : STRING]]></Declaration>
      <Get Name="Get" Id="{4313d227-83a4-058f-0465-9ca8841186a4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NewLine := _NewLine;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ada97d3e-dd7f-0ada-0be1-e68f70e46dbd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_NewLine := NewLine;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReadAllRows" Id="{e19a843a-8d18-0ff9-0de4-c88d595663c8}">
      <Declaration><![CDATA[METHOD PRIVATE ReadAllRows : DINT
VAR_INPUT
	startCaret : DINT;
END_VAR
VAR
	caret : DINT;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[caret := startCaret;

FOR i := 0 TO _RowCount - 1 DO
	IF (caret >= dataLength) THEN
		EXIT;
	END_IF
	caret := ReadRow(i, caret);
END_FOR

ReadAllRows := caret;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadHeader" Id="{d90cef34-8289-0ac4-2959-a4dd8ac2e400}">
      <Declaration><![CDATA[METHOD PRIVATE ReadHeader : DINT
VAR
	i : DINT;
	
	caret : DINT;
	lineEnd : DINT;
	cellLength : DINT;
	
	cell : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearData(_ColumnNameBuffer);

lineEnd := TO_DINT(FIND2(pSrcString := _DataString, pFindString := ADR(_NewLine)));
IF (lineEnd = 0) THEN
	lineEnd := dataLength;
END_IF

FOR i := 0 TO definedColumns - 1 DO
	cellLength := TO_DINT(FIND2(pSrcString := _DataString + TO_DWORD(caret), pFindString := ADR(_Separator)));
	IF (caret + cellLength > lineEnd) THEN
		cellLength := lineEnd - caret;
	END_IF
	IF (cellLength = 0) THEN
		cellLength := lineEnd;
	END_IF

	MEMSET(destAddr := ADR(cell), fillByte := 0, n := SIZEOF(cell));
	MEMCPY(destAddr := ADR(cell), srcAddr := _DataString + TO_DWORD(caret), n := TO_UDINT(MIN(SIZEOF(cell) - 1, cellLength - 1)));
	StringToAny(cell, _ColumnNameBuffer[i]);
	
	IF (cellLength = dataLength) THEN
		caret := lineEnd;
	ELSIF (cellLength = lineEnd) THEN
		caret := lineEnd;
	ELSE
		caret := caret + cellLength;
	END_IF
END_FOR

MEMCPY(
	destAddr := columnNamesOutput.pValue,
	srcAddr := ADR(_ColumnNameBuffer),
	n := TO_UDINT(MIN(columnNamesOutput.diSize, SIZEOF(_ColumnNameBuffer)))
);

ReadHeader := caret;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRow" Id="{9e4c8000-7c69-0be9-232c-fb4179063f04}">
      <Declaration><![CDATA[METHOD PRIVATE ReadRow : DINT
VAR_INPUT
	row : DINT;
	startCaret : DINT;
END_VAR
VAR
	i : DINT;
	
	caret : DINT;
	lineLength : DINT;
	cellLength : DINT;
	
	cell : T_MaxString;
	
	tableCell : __SYSTEM.AnyType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[caret := startCaret;

lineLength := TO_DINT(FIND2(pSrcString := _DataString + TO_DWORD(caret), pFindString := ADR(_NewLine)));
IF (lineLength = 0) THEN
	lineLength := dataLength;
END_IF

FOR i := 0 TO definedColumns - 1 DO
  IF (caret >= dataLength) THEN
		EXIT;
	END_IF
	cellLength := TO_DINT(FIND2(pSrcString := _DataString + TO_DWORD(caret), pFindString := ADR(_Separator)));
	IF (cellLength = 0 OR caret + cellLength > startCaret + lineLength) THEN
		cellLength := lineLength + startCaret - caret;
	END_IF
	IF (cellLength = 0) THEN
		caret := dataLength;
		EXIT;
	END_IF

	ClearData(cell);
	MEMCPY(destAddr := ADR(cell), srcAddr := _DataString + TO_DWORD(caret), n := TO_UDINT(MIN(SIZEOF(cell) - 1, cellLength - 1)));
	tableCell := _ColumnDefinitionBuffer[i];
	tableCell.pValue := tableCell.pValue + TO_DWORD(rowDefinition.diSize * row);
	CASE TO_INT(tableCell.TypeClass) OF
		TYPE_REAL, TYPE_LREAL:
			ReplaceString(cell, _DecimalSeparator, DefaultDecimalSeparator);
	END_CASE
	StringToAnyType(cell, tableCell);
	
	IF (cellLength = dataLength) THEN
		caret := startCaret + lineLength;
	ELSIF (cellLength = lineLength) THEN
		caret := startCaret + lineLength;
	ELSE
		caret := caret + cellLength;
	END_IF
END_FOR

ReadRow := caret;]]></ST>
      </Implementation>
    </Method>
    <Property Name="RowCount" Id="{ed443da8-c273-0153-280d-4c621b350138}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY RowCount : DINT]]></Declaration>
      <Get Name="Get" Id="{7ad9c8fe-4559-08da-00c7-f01597993e7f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RowCount := _RowCount;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{655700f4-3d23-0ab3-1716-3908da2b156b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_RowCount := RowCount;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Separator" Id="{b68ca63d-6f90-04d5-2320-3780f007dffc}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Separator : STRING]]></Declaration>
      <Get Name="Get" Id="{fce9d174-de86-05b6-20d4-813c0e4499e4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Separator := _Separator;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{eaa5df53-009d-0b64-0cef-d74aa32ee656}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Separator := Separator;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>