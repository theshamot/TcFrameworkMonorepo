<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ManipulateFunctionsTest" Id="{14169c0f-5a0f-0126-0137-c92919737a12}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ManipulateFunctionsTest EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ClearDataFunction();
ShiftDataLeftFunction();
ShiftDataRightFunction();
SwapFunction();
SwapByPointerFunction();
ClearDataAnyTypeFunction();]]></ST>
    </Implementation>
    <Method Name="ClearDataAnyTypeFunction" Id="{a4331508-017e-0412-33eb-281b9f774e40}">
      <Declaration><![CDATA[METHOD ClearDataAnyTypeFunction
VAR
	data : __SYSTEM.AnyType;
	intValue : INT;
	stringValue : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('ClearDataAnyTypeFunction');

intValue := 42;
data.diSize := SIZEOF(intValue);
data.pValue := ADR(intValue);

ClearDataAnyType(data);

AssertEquals_INT(
	Expected := 0,
	Actual := intValue,
	Message := 'Data memory of int type should be all set to 0');
	
stringValue := '42';
data.diSize := SIZEOF(stringValue);
data.pValue := ADR(stringValue);

ClearDataAnyType(data);
	
AssertEquals_STRING(
	Expected := '',
	Actual := stringValue,
	Message := 'Data memory of string type should be all set to 0');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearDataFunction" Id="{8bab33b3-023a-0211-1df9-0f38203bac79}">
      <Declaration><![CDATA[METHOD ClearDataFunction : BOOL
VAR
	data : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Clear data function');

data := 42;
ClearData(data);

AssertEquals_INT(
	Expected := 0,
	Actual := data,
	Message := 'Data memory should be all set to 0');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShiftDataLeftFunction" Id="{7942eae2-dd9e-0588-101a-d8ae892abdac}">
      <Declaration><![CDATA[METHOD ShiftDataLeftFunction : BOOL
VAR
	updatedBuffer : ARRAY[0..LastIndex] OF INT;
	
	expected : ARRAY[0..LastIndex] OF INT;
END_VAR
VAR CONSTANT
	LastIndex : INT := 2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Shift data left function');

updatedBuffer[LastIndex] := 1;
ShiftDataLeft(updatedBuffer, SIZEOF(INT));
updatedBuffer[LastIndex] := 2;
ShiftDataLeft(updatedBuffer, SIZEOF(INT));
updatedBuffer[LastIndex] := 3;

expected[0] := 1;
expected[1] := 2;
expected[2] := 3;

AssertArrayEquals_INT(
	Expecteds := expected,
	Actuals := updatedBuffer,
	Message := 'Data should be gradually shifter from end to begin');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShiftDataRightFunction" Id="{675e3647-39fe-0b70-2d1f-5970c0bafebd}">
      <Declaration><![CDATA[METHOD ShiftDataRightFunction : BOOL
VAR
	updatedBuffer : ARRAY[0..LastIndex] OF INT;
	
	expected : ARRAY[0..LastIndex] OF INT;
END_VAR
VAR CONSTANT
	LastIndex : INT := 2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Shift data right function');

updatedBuffer[0] := 3;
ShiftDataRight(updatedBuffer, SIZEOF(INT));
updatedBuffer[0] := 2;
ShiftDataRight(updatedBuffer, SIZEOF(INT));
updatedBuffer[0] := 1;

expected[0] := 1;
expected[1] := 2;
expected[2] := 3;

AssertArrayEquals_INT(
	Expecteds := expected,
	Actuals := updatedBuffer,
	Message := 'Data should be gradually shifter from begin to end');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwapByPointerFunction" Id="{405ad9c9-650c-0fa7-35ef-eedb31cfc7df}">
      <Declaration><![CDATA[METHOD SwapByPointerFunction : BOOL
VAR
	data1 : INT;
	data2 : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Swap by pointer function');

data1 := 42;
data2 := 420;

SwapByPointer(ADR(data1), ADR(data2), SIZEOF(data1));

AssertEquals_BOOL(
	Expected := TRUE,
	Actual := data1 = 420 AND data2 = 42,
	Message := 'Data should be swapped');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwapFunction" Id="{bd413a57-8fa6-0029-1084-f52da7f97a70}">
      <Declaration><![CDATA[METHOD SwapFunction : BOOL
VAR
	data1 : INT;
	data2 : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Swap function');

data1 := 42;
data2 := 420;

Swap(data1, data2);

AssertEquals_BOOL(
	Expected := TRUE,
	Actual := data1 = 420 AND data2 = 42,
	Message := 'Data should be swapped');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ManipulateFunctionsTest">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="ManipulateFunctionsTest.ClearDataAnyTypeFunction">
      <LineId Id="6" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="20" Count="1" />
      <LineId Id="9" Count="5" />
      <LineId Id="23" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ManipulateFunctionsTest.ClearDataFunction">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ManipulateFunctionsTest.ShiftDataLeftFunction">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ManipulateFunctionsTest.ShiftDataRightFunction">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ManipulateFunctionsTest.SwapByPointerFunction">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ManipulateFunctionsTest.SwapFunction">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>