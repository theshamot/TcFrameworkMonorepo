<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ConvertFunctionsTest" Id="{5c60e2d6-28aa-0817-3ab9-bc38d45e25ab}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ConvertFunctionsTest EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AnyToStringFunction();
StringToAnyFunction();
AnyTypeToStringFunction();
StringToAnyTypeFunction();]]></ST>
    </Implementation>
    <Method Name="AnyToStringFunction" Id="{88310384-b69f-02db-2220-3da8999f0eeb}">
      <Declaration><![CDATA[METHOD AnyToStringFunction : BOOL
VAR
	stringVar : T_MaxString := 'test';
	intVar : INT := 42;
	realVar : REAL := 3.14;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('ANY to STRING');

AssertEquals_STRING(
	Expected := 'test',
	Actual := AnyToString(stringVar),
	Message := 'Should convert STRING var to STRING');

AssertEquals_STRING(
	Expected := '42',
	Actual := AnyToString(intVar),
	Message := 'Should convert INT var to STRING');

AssertEquals_STRING(
	Expected := '3.14',
	Actual := AnyToString(realVar),
	Message := 'Should convert REAL var to STRING');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AnyTypeToStringFunction" Id="{42f37d30-c9fb-033d-046c-0a523908b466}">
      <Declaration><![CDATA[METHOD AnyTypeToStringFunction
VAR 
	stringVar : T_MaxString := 'test';
	intVar : INT := 42;
	realVar : REAL := 3.14;
	result  : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('ANYTYPE to STRING');
 
 
AssertEquals_STRING(
	Expected := 'test',
	Actual := AnyTypeToString(ToAnyType(stringVar)),
	Message := 'Should convert STRING var to STRING');

  
AssertEquals_STRING(
	Expected := '42',
	Actual := AnyTypeToString(ToAnyType(intVar)),
	Message := 'Should convert INT var to STRING');
 

AssertEquals_STRING(
	Expected := '3.14',
	Actual := AnyTypeToString(ToAnyType(realVar)),
	Message := 'Should convert REAL var to STRING');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StringToAnyFunction" Id="{a36c0b1c-36fd-0119-07a2-92b4f80d3142}">
      <Declaration><![CDATA[METHOD StringToAnyFunction : BOOL
VAR
	stringVar : T_MaxString;
	intVar : INT;
	realVar : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('STRING to ANY');

StringToAny('this is test', stringVar);
StringToAny('42', intVar);
StringToAny('3.14', realVar);

AssertEquals_STRING(
	Expected := 'this is test',
	Actual := stringVar,
	Message := 'Should return correct STRING value');

AssertEquals_INT(
	Expected := 42,
	Actual := intVar,
	Message := 'Should return correct INT value');

AssertEquals_REAL(
	Expected := 3.14,
	Actual := realVar,
	Delta := 0.001,
	Message := 'Should return correct REAL value');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StringToAnyTypeFunction" Id="{f87bd476-b999-0a0a-1296-affc546dc15a}">
      <Declaration><![CDATA[METHOD StringToAnyTypeFunction
VAR
	stringVar : T_MaxString;
	stringVar1 : __SYSTEM.AnyType;
	stringVar2 : __SYSTEM.AnyType;
	intVar : __SYSTEM.AnyType;
	realVar : __SYSTEM.AnyType; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('STRING to ANYTYPE');

stringVar := 'this is test';
stringVar1.diSize := SIZEOF(stringVar);
stringVar1.pValue := ADR(stringVar);
stringVar1.TypeClass := IBaseLibrary.TypeClass.TYPE_STRING;

StringToAnyType(stringVar, stringVar2);
 
 

AssertEquals(
	Expected := stringVar1,
	Actual := stringVar2,
	Message := 'Should return correct STRING value');

//AssertEquals_STRING(
//	Expected := '42',
//	Actual := AnyTypeToString(intVar),
//	Message := 'Should return correct INT value');

//AssertEquals_STRING(
//	Expected := '3.14',
//	Actual := AnyTypeToString(realVar),
//	Message := 'Should return correct REAL value');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ConvertFunctionsTest">
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
    <LineIds Name="ConvertFunctionsTest.AnyToStringFunction">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ConvertFunctionsTest.AnyTypeToStringFunction">
      <LineId Id="6" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="8" Count="3" />
      <LineId Id="30" Count="1" />
      <LineId Id="13" Count="3" />
      <LineId Id="33" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="18" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ConvertFunctionsTest.StringToAnyFunction">
      <LineId Id="3" Count="21" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ConvertFunctionsTest.StringToAnyTypeFunction">
      <LineId Id="40" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="78" Count="1" />
      <LineId Id="41" Count="8" />
      <LineId Id="64" Count="8" />
      <LineId Id="60" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>